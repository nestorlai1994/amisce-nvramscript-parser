package main

import (
	"encoding/json"
	"fmt"
	"io"
	"os"
	"strings"

	"github.com/nestorlai1994/amisce-nvramscript-parser/internal/item"
)

func main() {
	fmt.Println("Welcome to the NVRAM Script Diff!")
	fmt.Println("This program compares two NVRAM script files which are generated by nvramscript-parser.go and outputs the differences.")

	ffile := os.Args[1]
	sfile := os.Args[2]

	offile := openFile(ffile)
	osfile := openFile(sfile)

	fitems := unmarshal(offile)
	sitems := unmarshal(osfile)

	fmap := generateMap(fitems)
	smap := generateMap(sitems)

	for k, v := range fmap {
		if _, ok := smap[k]; !ok {
			fmt.Println("Item not found in second file: ", string(k))
			//fmt.Println("Item: ", v)
		} else if v.IsValueEqual(smap[k].Value) {
			delete(fmap, k)
			delete(smap, k)
		}

	}

	for k := range smap {
		if !strings.Contains(k, "Boot Option") {
			fmt.Printf("question: %s \n", k)
		}
	}

	for k := range fmap {
		if !strings.Contains(k, "Boot Option") {
			fmt.Printf("first question: %s \n", k)
		}
	}
}

func openFile(file string) []byte {
	f, err := os.Open(file)
	if err != nil {
		fmt.Println("Error opening file: ", err)
	}
	defer f.Close()
	b, _ := io.ReadAll(f)
	return b
}

func unmarshal(file []byte) []item.Item {
	var items []item.Item
	json.Unmarshal(file, &items)
	return items
}

func generateMap(items []item.Item) map[string]item.Item {
	m := make(map[string]item.Item)
	for _, item := range items {
		m[string(item.Question)] = item
	}
	return m
}
